;----- Библиотека x16 -------
;----------------------------
;--------- Ver. 0.3 ---------

;Без поддержки папок.
;Доступны 4 гб.
;Возвращает размер в edx
macro LoadFile {						;Adress - eax | pach - si //Доступны 4 гб при инициализ. gs
	
;ERRORs
;0x8 - long name file

	
	mov di, file_next
	xor cx, cx
	mov [logerror], 0x8
@@:
	lodsb
	cmp al, '$'
	je Fat
	
	inc cx
	cmp cx, 12
	je error
	
	stosb
	jmp @b

Fat:
	mov [This_file], eax
	xor eax, eax
	mov esi, Loadingg
	call printstr
	mov esi, file_next
	call printstr
	mov esi, CLOSED_SKOBOCHKA
	call printstr
.Definition:								;Читаем Таблицу FAT
	mov word[buffer], 600h					;Адрес деструктора
	call ReadEDD							;

.Root_dir:									;Вычисляем адрес корневого каталога
	mov al, [fat_copys]						;
	mul [fat32_bigsektorpearlfat]			;
	add ax, word[fat_reserv_sectors]		;
	mov word[RootDir], ax					;
	mov word[buffer], data_t				;
	mov bx, 0								;-
.File_Destr_:								;Читаем Корневой каталог
	mov ax, word[RootDir]					;
	add ax, bx								;
	mov word[Ldb_bq], ax					;
											;
	call ReadEDD							;
	mov ax, 0								;-
.File_Des:									;Поиск файла.
	mov si, 800h							;Читаем данные с таблицы по virtual at 800h. см fatRead.
	add si, ax								;
	mov cx, 32								;
	mov di, 700h							;Деструктор заголовка файла.
	rep movsb								;Пишем ^
	push di cx si							;
	mov cx, 11								;Цикл на 11 символов.
	mov di, file_next						;Сверяем с
	mov si, Dir_name						;искомым.
	rep cmpsb								;^
	je InitiateFAT							;если найден, переходим к Деструктору файла.
	pop si cx di							;
											;
	cmp ax, 512								;Если сектор прочтен**
	je @f									;
											;
	jmp .Jamping							;
@@:											;
	inc bx									;**Идем на следующий
	jmp .File_Destr_						;
.Jamping:									;
	add ax, 32								;+ 32 к позиции чтения файла. Читаем следующий заголовок файла
	jmp .File_Des							;


InitiateFAT: 								;Деструктуризация файлa
	mov ah, byte[Dir_FstClusLO+4+3]			;Читаем младший бит первого сектора файла
	mov al, byte[Dir_FstClusLO+4+2]			;Читаем старший бит первого сектора файла

;# GLOBAL DX: Cluster file
;# GLOBAL AX: Смещение

;# Грузим Таблицу По 800Н+
;# Проверка ТАблиты+
;# Ищем файл+
;# Грузим по 7е00Н + Смещение Подгрузчика /
;# Если не конец файла то подгружаем -
;# ...

Loader_FAT:									;Читаем Fat карту--
	mov word[Ldb_bq], 32 					;Подготовка к чтению 32 сектора
	push ax									;
	mul word[Step]							;Множим на шаг
	div word[Step4]							;Делим на шаг2
	add word[Ldb_bq], ax					;Подготовка к чтению сектора по счетчику
	pop ax
											;Подготовка буффера
	mov word[buffer], 800h					;
	call ReadEDD							;Чтение FAT
											;
.Initializate_FAT:							;Инициализация ФАТ
	mov si, 800h							;
	add si, dx 								;Смещение
							
	mov di, End_clus						;Байты конца файла
	cmpsd									;Сравниваем ^
	je FILE_search
FILE_search: 								;Поиск файла по формуле
											;FirstSectorofCluster = ((N – 2) * fat_sector_to_klaster) + FirstDataSector;
	push ax dx								;
	sub ax, 2								;
	mov bl, byte[fat_sector_to_klaster]		;
	mov bh, 0								;
	mul bx									;
	add ax, word[RootDir]					;--
.load:										;Нашли файл. Читаем его
	mov word[Ldb_bq], ax					;Сектор файла на диске
	pop dx ax								;
	;mov bx, word[LB]						;Пишем файл по этому адресу******
	mov word[buffer], 0A00h	;(bx)			;Статический адрес буффера. см fatRead. 
	mov bl, byte[fat_sector_to_klaster]		;Читаем кол-во секторов в кластере в младший байт.
	mov bh, 0								;Обнуляем старший.
	mov word[num], bx						;Читаем весь кластер.
	call ReadEDD							;Чтение файла.
	;-----------------------------------------------;FIX----;-------------
	;Было решено использовать функцию в UNREAL MODE,		;*
	;для этого меняем метод записи файла в память.		;*
	;Пишем в [ds:ebx]. если не имеет границы в 1 Мег.	;*
	;Оригинал используется в MBR						;*
	push ax cx si										;Сохраняем Дабы не потерять.
	mov cx, word[kluster]								;Устанавливаем счетчик на кластер(в байтах).
	mov si, 0A00h										;Читаем из Статичного буффера.
	mov ebx, [This_file]								;Куда читаем
@@:														;			
	lodsb												;Загружаем байт из A00h.
	mov byte[ds:ebx], al								;Грузим в буффер.
	add [This_file], 1									;Инкриментируем.
	inc ebx												;^
														;
	loop @b												;В цикле.
	pop si cx ax										;Возвращаем.
	;-----------------------------------------------;-------;--------------
	mov word[num], 1						;Читаем 1 сектор.
	mov bx, word[kluster]					;Размер кластера в bx. в байтах
	add word[LB], bx						;Смещаем адрес конечной записи файла на bx(Кластер).
	jne Noend								;Если не конец...
	jmp END_								;
Noend:										;То Сместим адрес чтения,
	mov si, 800h							;и найдем следующий кластер
	add si, dx 								;файла.
	lodsw									;
	jmp Loader_FAT							;Прыгаем к инициализации fat. для поиска^.
	
END_:										;Конец?
	mov edx, [Dir_Filesize]					;Возвращаем размер файла в edx(byte)
push edx
	mov si, OKe								;
	call printstr							;Оповестим пользователя.
pop edx
}											;Выходим
;-------------------------------------------------------------------------------------------------------------------------------------------
;Поддержка папок.
;Доступна память до 1 мб
;
macro loadf pach, adress {				

	pusha ; BEGIN
	
	mov si, Loading
	call printstr
	
;--------- DIR_ROOT ---------------
.Root_dir:
	mov al, [fat_copys]
	mul [fat32_bigsektorpearlfat]
	add ax, word[fat_reserv_sectors]
	mov word[RootDir], ax
	mov word[buffer], data_t
;-------- END DIR_ROOT ------------
	
;---------- VAR ----------
	mov word[LB], adress
	mov word[LL], ax
;-------- END VAR --------

;---------- STRING ---------------- # Разбивка Строки по частям
	mov si, pach
	mov di, file_name
	sub ax, ax
Str_patch:
	lodsb
	cmp al, '/'
	je .z
	jmp @f
.z:
	lodsb
	jmp @f
@@:
	cmp al, '/'
	je .carret
	cmp al, '$'
	je .end
	stosb
	lodsb
	jmp @b
.carret:	
	call Open_folder
	mov di, file_name
	lodsb
	jmp @b
.end:
	call Open_file

;-------- END STRING ----------------
jmp finish
;---------- FAT --------------
Open_file:

	mov bx, 0
.File_Destr_:
	mov ax, word[LL]
	add ax, bx
	mov word[Ldb_bq], ax

	call ReadEDD
	mov ax, 0
.File_Des:
	mov si, 800h
	add si, ax
	mov cx, 32
	mov di, 700h
	rep movsb
	push di si
	mov cx, 11
	mov si, file_name
	mov di, Dir_name
	rep cmpsb
	je .InitiateFAT
	pop si  di
	
	cmp ax, 512
	je @f
	
	jmp .Jamping
@@:
	inc bx
	jmp .File_Destr_
.Jamping:
	add ax, 32
	jmp .File_Des


.InitiateFAT: ; Начальный первый сектор файла
	pop si  di
	mov al, byte[Dir_attr]
	cmp al, 0x10
	je error
	
	mov ah, byte[Dir_FstClusLO+4+3]
	mov al, byte[Dir_FstClusLO+4+2]

;# GLOBAL DX: Cluster file
;# GLOBAL AX: Смещение

;# Грузим Таблицу По 800Н+
;# Проверка ТАблиты+
;# Ищем файл+
;# Грузим по 7е00Н + Смещение Подгрузчика /
;# Если не конец файла то подгружаем -
;# ...
.Loader_FAT:
	mov word[Ldb_bq], 32 ;Карта FAT
	push ax
	mul word[Step]
	div word[Step4]
	add word[Ldb_bq], ax
	pop ax
				;Loader FAT	
	mov word[buffer], 800h
	call ReadEDD
.Initializate_FAT:
				;Initializate FAT
	mov si, 800h
	add si, dx ;Смещение

	mov di, End_clus
	cmpsd
	je .FILE_search
.FILE_search: 	;FirstSectorofCluster = ((N – 2) * fat_sector_to_klaster) + FirstDataSector;
	push ax dx
	sub ax, 2
	mov bl, byte[fat_sector_to_klaster]
	mov bh, 0
	mul bx
	add ax, word[RootDir]
.load:
	mov word[Ldb_bq], ax
	pop dx ax
	mov bx, word[LB]
	mov word[buffer], bx
	mov bl, byte[fat_sector_to_klaster]
	mov bh, 0
	mov word[num], bx
	call ReadEDD
	mov word[num], 1
	mov bx, word[kluster]
	add word[LB], bx
	jne .Noend
	jmp .END_
.Noend:
	mov si, 800h
	add si, dx ;Смещение
	lodsw
	jmp .Loader_FAT
		

.END_:
	ret
	
Open_folder:
	push si
	mov bx, 0
.File_Destr_:
	mov ax, word[LL]
	add ax, bx
	mov word[Ldb_bq], ax

	call ReadEDD
	mov ax, 0
.File_Des:
	mov si, 800h
	add si, ax
	mov cx, 32
	mov di, 700h
	rep movsb
	push di si
	mov cx, 11
	mov si, file_name
	mov di, Dir_name
	rep cmpsb
	je .InitiateFAT
	pop si di
	
	cmp ax, 512
	je @f
	jmp .Jamping
@@:
	inc bx
	jmp .File_Destr_
.Jamping:
	add ax, 32
	jmp .File_Des


.InitiateFAT: ; Начальный первый сектор папки
	pop si di
	mov al, byte[Dir_attr]
	cmp al, 0x10
	jne error

	mov ah, byte[Dir_FstClusLO+4+3]
	mov al, byte[Dir_FstClusLO+4+2]

;# GLOBAL DX: Cluster file
;# GLOBAL AX: Смещение


.FOLDER_search: 	;FirstSectorofCluster = ((N – 2) * fat_sector_to_klaster) + FirstDataSector;
	sub ax, 2
	mov bl, byte[fat_sector_to_klaster]
	mov bh, 0
	mul bx
	add ax, word[RootDir]
	mov word[LL], ax

;# Грузим Таблицу По 800Н+
;# Проверка ТАблиты+
;# Ищем файл+
;# Грузим по 7е00Н + Смещение Подгрузчика /
;# Если не конец файла то подгружаем -
;# ...
	pop si
	ret
;-------- END FAT ------------
		

finish:
	
	mov si, file_name
	call printstr
	
	mov si, OK
	call printstr
	
	popa ;END
}
paused: 			; Поместить в переменную клавишу по табл ASCII
	push ax
	xor ax, ax
	int 16h
	pop ax
ret

Error:
	mov si, fatal_error
	call printstr
	mov si, press_enter
	call printstr
	mov si, Ecode
	call printstr
	mov [logerror], ah
	mov si, logerror
	call printstr
	call paused
	jmp 0xFFFF:0
ret

ReadEDD:
	push ax dx
	mov si, LDB
	mov ah, 42h
	mov dl, 80h
	int 13h
	jc error
	jmp @f
error:
	call Error
@@:
	pop dx ax
ret
macro WriteEDD {
	push ax dx
	mov ah, 43h
	mov al, 01h
	mov dl, 80h
	mov esi, [word]LDB
	int 13h
	pop dx ax
}
printstr: 				; Кладем строку в si c переводом ,страница 0
		push ax
		mov ah, 05H
		mov al, 0h
		int 10h
		mov ah, 0eH
		mov al, 0
	@@:	
		lodsb
		test al, al
		jz @f
		int 10h
		jmp @b
	@@: 
		pop ax
		ret
clrscr:
		mov ah, 0h
		mov al, 7
		int 10h
ret
;------------------------
logerror db ?,0
Ecode db 'Error Code: ',0
fatal_error db 'Error',13,10,0
press_enter db 13,10,'press any key to reboot',13,10,0
Loading db 'Loading-file... ',0	


Loadingg db 'Loading-file [',0
CLOSED_SKOBOCHKA db '] ',0
OKe db 'OK',0

file_name db 11 dup (0)
	  db 0
file_next db 12 dup (0)
	  
	  
include '../../Header/File_System/Fat32/fatRead'